#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

vector<string> solution(vector<string> orders, vector<int> course)
{
    vector<string> answer;

    string menus = "";
    for(int i = 0; i < orders.size(); i++)
        menus += orders[i];

    sort(menus.begin(), menus.end());
    menus.erase(unique(menus.begin(), menus.end()), menus.end());

    vector<pair<string, int>> ans;

    for(int i = 0; i < course.size(); i++)
    {
        vector<bool> mark(menus.size(), false);
        for(int j = 0; j < course[i]; j++) mark[j] = true;

        vector<pair<int, string>> v;

        do {
            string s = "";
            for(int j = 0; j < mark.size(); j++)
                if(mark[j]) s += menus[j];
            //cout << s << endl;

            int cnt = 0;
            for(int j = 0; j < orders.size(); j++)
            {
                string order = orders[j];
                bool flag = true;
                for(int k = 0; k < s.size(); k++)
                {
                    if(order.find(s[k]) == string::npos) {flag = false; break;}
                }
                if(flag) { cnt++; }
            }
            v.push_back({cnt, s});
        } while(prev_permutation(mark.begin(), mark.end()));

        sort(v.begin(), v.end(), greater<>());

        if(v.front().first > 1)
            answer.push_back(v.front().second);
        else
            continue;

        for(int j = 1; j < v.size(); j++)
        {
            if(v[j].first < v.front().first) break;
            answer.push_back(v[j].second);
        }

    }

    sort(answer.begin(), answer.end());
    //for(auto x : answer) cout << x << endl;
    return answer;
}
