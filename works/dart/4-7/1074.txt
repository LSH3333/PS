import 'dart:io';
import 'dart:math';

var N, goalR, goalC;

void main()
{
    var ip = stdin.readLineSync()!.split(' ').map((o) => int.parse(o)).toList();
    N = ip[0]; goalR = ip[1]; goalC = ip[2];
    print(dfs(N,0,0,0));
}

int FindArea(int length, int _r, int _c)
{
    // 0 사분면
    if(goalR - _r <= (length ~/ 2)-1 && goalC - _c <= (length ~/ 2) -1)
    {
        return 0;
    }
    // 1 사분면
    if(goalR - _r <= (length ~/ 2) - 1 && goalC - _c <= length - 1)
    {
        return 1;
    }
    // 2 사분면
    if(goalR - _r <= length - 1 && goalC - _c <= (length ~/ 2) - 1)
    {
        return 2;
    }
    // 3 사분면
    else
    {
        return 3;
    }
}

int dfs(int n, int startNum, int startR, int startC)
{
    if(n == 0)
    {
        return startNum;
    }

    int length = pow(2, n).toInt();
    int cnt = (length ~/ 2) * (length ~/ 2);
    int area = FindArea(length, startR, startC);

    if(area == 0)
    {
        return dfs(n-1, startNum + (cnt * area), startR, startC);
    }
    else if(area == 1)
    {
        return dfs(n-1, startNum + (cnt * area), startR, startC + (length ~/ 2));
    }
    else if(area == 2)
    {
        return dfs(n-1, startNum + (cnt * area), startR + (length ~/ 2), startC);
    }
    else
    {
        return dfs(n-1, startNum + (cnt * area), startR + (length ~/ 2), startC + (length ~/ 2));
    }
}
